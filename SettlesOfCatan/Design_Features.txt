/*
Settlers of Catan Technical/Desing Specifications

Features List:
-allow for unlimited player extensions
-Random/ automatic map generation
-Pre-generated maps ( for more fair play0
-Player turn phase cycles
	Roll
	Gather resources ( automatic ?)
	move thief ( if applicable )
	Trade phase
	for each player staring from current_player
		// allow building of stuff
-Game board/map is reprsented in several possible ways
	1) -- hexagonal map using a 2d array
		-- vertex and face maps are represented using 2d arrays
			with each vertex and face coming from a vertex/node pool
		-- Drawing of the game board will be easy, but it will be difficult to implement the placement
			and movement of the buildings.
	2) -- A graph representing the entire game boards
		-- for each hex tile, there will be 1 + 6 + 6 vertices.
		with each vertex shared between neighbours.
		generations and drawing will be complicated to set up.
-Use the mouse to place bulidings.
-Automatic checking of valid choices.
	- trade ( 4-1, 3-1, 2-1 )
		- They own a settlement/city which is by a port
		- The trade is good ( valid number of cards, and type of cards )
	- placement of roads
	- placement of settlements and city
		- valid area
			- two spaces apart
			- connected by road
		- Player owns enough settlements (>0 ) for the placement
	- Assignment of Largest Army and Longest Road cards
-Automatic detections of victory points counter for all players

-Mobile app
	players play from their phone to a central game board hosted on a server



todo
	configuration class
	list of all the objects
		game board
		tiles ( resource tiles, water tiles, port tiles, desert)
			- roll chance
		thief object
		settlements,roads, city
		cards
			dev cards
			resoure card
		dice
	methods for the model for use in an interface
	board inmplmentation
		graph -- It would be really cool to do this method, but I have no clue how I am supposed to 
				query the graph, or even draw the elements of the graph
		easier to implement
		array based;
		two levels of resolution for the cellls
		resolution 1 == each tile is a cell
		resolution 2 == there are twelve 
		 /  \
	    |    |
		 \  /

class Model{
public:
	//variables
	//board details
	void* board;
	int board_size;
	int board_width;
	int number_of_tiles;
	int number_of_land_tiles
	int number_of_watertiles;

	int num_of_extensions;
	int num_of_ring_levels;

	int phase;
	int roll_value;

	resource_t bank;



	//methods
	convert_to_city()
	add_building(int type,int player)
	get_building_cost(int building_type);
	void get_dev_card();
	int roll(int num_dice, int num_sides);
private:
	tiles_t default_tiles;
	default_dev_cards;
	default_resources_for_player
	default_resources_for_bank;
	default_building_costs
	default_bulidings_for_player

}




m : level
n : number of tiles on a given level
n	| m		| number of more nodes
1	| 1		| 12
6	| 2		| 42
12	| 3		| 72
18	| 4		| 102
F(m) = 30m - 18 for m >= 2
F(n) = 5n + 12 for n >= 2
F(M) = 15*M^2 -3  , with M being the total number of levels
number of tiles per level  = 6(m-1)   for m >= 2
number of tiles with L levels =  6(L(L+1)/2) + 1  for L >=2  == 3L^2 - 3L + 1

// let m be the mth level of a board
n = (m-1)*6
m = (n+ 6)/6



// given that a board has m levels
(2m-1) ==  length of the longest row in the board

2d array to represent hex:
1) N = length of longest row in the hex tiling
2) array[N*N];
3) let m be the number of levels
	if m is EVEN then
		the first row is offset by 1
	else if m is ODD then
		the first row is not offset by 1
4) To determine the level/ring a tile is on, given that we know the row
	given the middle hex is ring 0 , and increasing in ring level as you move outwards from the center
ring_level(r,L){
	let r be the row of the tile
	let L be the number of levels
	if( r<= L) then  L- 1 - r
	else if( r> L) then r % (L-1)
}

5) the amount of offset tiles for a given row r is given by the following equation
r is the row
L is the number of levels

offset = ring_level(r,L)/2;
if( r is EVEN){
	if( L is EVEN){ offset++;}
	return offset;
}else{
	return offset;
}

6)Number of tiles based off of row
let L be the number of levels
let r be the row
return 2*L - 1  - ring_level(r,L);
	

To create the graph with all the necessary vertices for tiles, faces and intersection points
1) Create a graph with all the tiles. It is easy to do this with a 2d array to hold all the hexagonal tiles
	This graph is called G with vertices v_g, and edges e_g
2) For every edge e_g in G, create a new node  v_f


*/



// TODO
-- a way to map keyboard keys to actions based on the current screen which is being shown











/*
	resource_t r = { 0, 0, 0, 0, 0 };
	switch(card){
		case(Model::buildings::ROAD) : {
			r.wood = 1;
			r.brick = 1;
		}break;
		case(Model::buildings::SETTLEMENT) : {
			r.wheat = 1;
			r.brick = 1;
			r.sheep = 1;
			r.wood = 1;
		} break;
		case(Model::buildings::CITY) : {
			r.wheat =2;
			r.ore = 3;
		}break;
		case(Model::buildings::DEV_CARD) : {
			r.wheat = 1;
			r.sheep = 1;
			r.ore = 1;
		}break;
		default:;
	}
	return r;
*/